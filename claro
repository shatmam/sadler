#!/usr/bin/env python3
# -- coding: utf-8 --

import os
import requests
import psutil
import sys
import subprocess
import tempfile
import threading
import time
from concurrent.futures import ThreadPoolExecutor
import hashlib
import platform
import base64
import json
import datetime
import urllib.request
from progress.spinner import Spinner, MoonSpinner, PieSpinner, PixelSpinner, LineSpinner
import socket 
import secrets
from datetime import datetime, timedelta
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import ssl
import argparse
import random
import ipaddress
import signal
import re
import requests
import urllib3

# Desactiva la advertencia de certificado no verificado
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


# ---------------------- CONFIGURACIÓN INICIAL ----------------------
INTERVALO_MINUTOS = 60
INTERVALO_SEGUNDOS = INTERVALO_MINUTOS * 60

# Lista de useragent para simular peticiones de diferentes navegadores y evitar el baneo 
USER_AGENTS = [
    "Mozilla/5.0 (Linux; Android 10; SM-A102U) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0 Mobile Safari/537.36",
    "Dalvik/2.1.0 (Linux; U; Android 10; SM-A102U Build/QP1A.190711.020)",
    "Mozilla/5.0 (Linux; Android 11; SM-A305FN) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0 Mobile Safari/537.36",
    "Mozilla/5.0 (iPhone; CPU iPhone OS 15_2 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1",
    "okhttp/4.9.1",  # apps que usan okhttp
    "com.claro.app/5.0.1 (Android 11; SM-A305FN)"
]

# Host de la telefónica para la función ACTIVAR_INTERNET---INDISPENSABLE---
ACT_FILE = [
    "erp.claro.com.do", 
    "bloqueo2.claro.com.do", 
    "miclaroempresas.claro.com.do",
    "airg.com",
    "clarovr.com",
    "assets.portal.shop",
    "apk.ctn.smapps.mx",
    "apk.ctn.smapps.mx:9852",
    "omicron.banreservas.com:5443",
    "instagram.com",
    "fbcdn.net",
    "cdninstagram.com",
    "appcentral.claro.com.do",
    "prepagoenlinea2.claro.com.do",
    "mivoz.claro.com.do",
    "miclaroapp.claro.com.do",
    "api.mi.claro.com.do"
]

# Codigos de Colores para impresiones coloridas
RED = '\033[0;31m'
GREEN = '\033[0;32m'
YELLOW = '\033[1;33m'
BLUE = '\033[0;34m'
CYAN = '\033[96m' 
NC = '\033[0m'

# Función para salir de la consola al presionar ctrl + c
def salir_graciosamente(signum, frame):
    try:
        mensaje = f"\n{BLUE}[🚨] !!Entendido!!. Todos los procesos fueron detenidos...{NC}\n"
        os.write(2, mensaje.encode())  # 2 = stderr
    except:
        pass
    os._exit(0)

# Capturar Ctrl+C (SIGINT) y kill (SIGTERM)
signal.signal(signal.SIGINT, salir_graciosamente)
signal.signal(signal.SIGTERM, salir_graciosamente)
        
# ---------------------- ACTUALIZACIÓN AUTOMÁTICA ----------------------

# Función para detectar si ya hay Internet y detener las peticiones de EJECUTAR_BUG y EJECUTAR_BUG
def tiene_internet():
    return subprocess.call(['curl', '-X', 'HEAD', '-s', '-k', '--max-time', '5', 'https://www.cloudflare.com'],
                           stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL) == 0

# Clases de errores personalizados
class SecurityError(Exception):
    """Excepción para errores de seguridad que terminan el programa"""
    def _init_(self, message):
        super()._init_(message)
        sys.stderr.write(f"{RED}🔵 ERROR DE SEGURIDAD: {message}{NC}\n")
        mostrar_info()
        sys.stderr.write(f"{YELLOW}🔵 El programa se cerrará por razones de seguridad{NC}\n")
        os._exit(0)  # Salida limpia con código 0

class LicenseError(Exception):
    """Excepción para errores de licencia que terminan el programa"""
    def _init_(self, message):
        super()._init_(message)
        sys.stderr.write(f"{RED}🔵 ERROR DE LICENCIA: {message}{NC}\n")
        mostrar_info()
        sys.stderr.write(f"{YELLOW}🔵 Contacte al administrador para renovación{NC}\n")
        os._exit(0)  # Salida limpia con código 0

# Función ejecuta peticiones por https y http a los Host con acceso sin saldo a la telefónica ---Es importante que siga ese orden de peticiones---
def ACTIVAR_INTERNET():
    inicio = time.time()  # Inicia el cronómetro

    if tiene_internet():
        os.system("cls" if os.name == "nt" else "clear")
        duracion = time.time() - inicio
        sys.stderr.write(f"{GREEN}🟢 Ya tienes internet. ({duracion:.2f} segundos){NC}\n")
        time.sleep(10)
        return

    sys.stderr.write(f"\n{BLUE}🚀 Activando internet...{NC}\n")

    UA = random.choice(USER_AGENTS)
    HDR = {"User-Agent": UA, "X-Requested-With": "com.claro.app"}

    urls = ACT_FILE
    if not isinstance(urls, list):
        raise ValueError("ACT_FILE debe ser una lista de dominios")

    def probar_url(url_base):
        for proto in ['http://', 'https://']:
            if tiene_internet():
                return True
            url = proto + url_base
            try:
                requests.head(url, headers=HDR, timeout=5, verify=False)
            except requests.RequestException:
                pass
        return False

    for ronda in range(10):
        if tiene_internet():
            os.system("cls" if os.name == "nt" else "clear")
            duracion = time.time() - inicio
            sys.stderr.write(f"{GREEN}🟢 Ya tienes internet. ({duracion:.2f} segundos){NC}\n")
            return

        sys.stderr.write(f"{BLUE}🔄 Ronda {ronda + 1}/10 - intentando activar conexión...{NC}\n")

        with ThreadPoolExecutor(max_workers=17) as executor:
            futures = [executor.submit(probar_url, url) for url in urls]
            for future in futures:
                if future.result():
                    os.system("cls" if os.name == "nt" else "clear")
                    duracion = time.time() - inicio
                    sys.stderr.write(f"{GREEN}🟢 Ya tienes internet. ({duracion:.2f} segundos){NC}\n")
                    time.sleep(10)
                    return

    for i in range(1, 30):
        sys.stdout.write(f"\r{YELLOW}Esperando para verificar conexión...{i}/30s{NC}")
        sys.stdout.flush()

    sys.stderr.write("\n")

    if tiene_internet():
        duracion = time.time() - inicio
        sys.stderr.write(f"{GREEN}🟢 Ya tienes internet, prueba en https://fast.com ({duracion:.2f} segundos){NC}\n")
        time.sleep(10)
        return

    sys.stderr.write(f"{YELLOW}🟡 Aún sin conexión. Esperando 20 segundos más...{NC}\n")
    custom_animation(duracion=21, ping_interval=25)

    if tiene_internet():
        duracion = time.time() - inicio
        sys.stderr.write(f"{GREEN}🟢 Ya tienes internet, prueba en https://fast.com ({duracion:.2f} segundos){NC}\n")
        time.sleep(10)
    else:
        sys.stderr.write(f"\n{RED}🚫 No se logró activar internet, intenta modo avión.{NC}\n")
        
# Keep-Alive Animado para mantener la conexión activa
def custom_animation(duracion=61, ping_interval=25):
    spinner_chars = ['|', '/', '-', '\\']
    paso = 0.1
    iteraciones = int(duracion / paso)
    ping_cada = int(ping_interval / paso)

    print(f"{YELLOW}🔵 Manteniendo el Xploit activo...{NC}", end=' ', flush=True)

    try:
        for i in range(iteraciones):
            # Mostrar animación
            char = spinner_chars[i % len(spinner_chars)]
            sys.stdout.write(f'\r{YELLOW}🔵 Manteniendo el Xploit activo... {char}{NC}')
            sys.stdout.flush()

            # Hacer ping cada cierto tiempo
            if i % ping_cada == 0:
                proc = subprocess.Popen(["ping", "-c", "1", "8.8.8.8"],
                                        stdout=subprocess.DEVNULL,
                                        stderr=subprocess.DEVNULL)
                proc.wait()

            time.sleep(paso)

    except KeyboardInterrupt:
        salir_graciosamente()
        
# FUNCIÓN PRINCIPAL EJECUTA LAS PETICIONES EN ORDEN
def MAIN():
    
    hora_actual = None  # se actualiza solo si no hay Internet
    hora_desc = None 

    while True:
        if not tiene_internet():
            if hora_actual is None:  # solo la primera vez que se pierde Internet
                hora_actual = datetime.now().strftime("%H:%M:%S")
            hora_desc = hora_actual
            # ÚNICA PETICIÓN 
            ACTIVAR_INTERNET()
            custom_animation(duracion=61, ping_interval=25)

        else:
            sys.stderr.write(f"{GREEN}🟢 Ultima desconexion {hora_desc} - Conectado{NC}\n")
            sys.stderr.write(f"{YELLOW}🔵 Si desea detener, presiona Ctrl+C para salir...{NC}\n")
            hora_actual = None
            custom_animation(duracion=31, ping_interval=25)
            
# ---------------------- INICIO ----------------------
if _name_ == '_main_':
    try:
        hora_actual = datetime.now().strftime("%H:%M:%S")
        os.system("cls" if os.name == "nt" else "clear")
        sys.stderr.write(f"{GREEN}🟢 {hora_actual} - Escaneando...{NC}\n")

        MAIN()
    except KeyboardInterrupt:
        salir_graciosamente()
